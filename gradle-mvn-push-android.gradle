/*
 * Copyright 2013 Chris Banes
 * Copyright 2023 Liao Heng
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

//https://docs.gradle.org/current/userguide/publishing_maven.html
//https://docs.gradle.org/7.3.3/userguide/signing_plugin.html#signing_plugin
//required gradle > 7.3.3
apply plugin: 'maven-publish'
apply plugin: 'signing'

def isReleaseVersion() {
    return !VERSION_NAME.endsWith('SNAPSHOT')
}

def isJavaDoc(){
    return hasProperty('ENABLE_JAVA_DOC') ? ENABLE_JAVA_DOC : false
}

def isJavaSource(){
    return hasProperty('ENABLE_JAVA_SOURCE') ? ENABLE_JAVA_SOURCE : true
}

def getReleaseRepositoryUrl() {
    return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
            : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
}

def getSnapshotRepositoryUrl() {
    return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
            : "https://oss.sonatype.org/content/repositories/snapshots/"
}

//https://stackoverflow.com/questions/35435173/prevent-javadoc-from-failing-gradle-build
//https://stackoverflow.com/questions/26874498/publish-an-android-library-to-maven-with-aar-and-sources-jar
task androidJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    android.libraryVariants.all { variant ->
        if (variant.name == 'release') {
            owner.classpath += variant.javaCompileProvider.get().classpath
        }
    }
    options.addStringOption('Xdoclint:none', '-quiet')
    options.addStringOption('encoding', 'UTF-8')
    options.addStringOption('charSet', 'UTF-8')
    exclude '**/R.html', '**/R.*.html', '**/index.html', "**/R.java", '**/BuildConfig.java'
    failOnError false
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    archiveClassifier.set('javadoc')
    from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.srcDirs
}

publishing {
    repositories {
        maven {
            url = isReleaseVersion() ? getReleaseRepositoryUrl() : getSnapshotRepositoryUrl()
            credentials {
                username = NEXUS_USERNAME
                password = NEXUS_PASSWORD
            }
        }
    }
    publications {
        uploadArchives(MavenPublication) {
            groupId = GROUP
            artifactId = POM_ARTIFACT_ID
            version = VERSION_NAME

            afterEvaluate {
                from components.release
            }
            if (isJavaSource()){
                artifact(androidSourcesJar)
            }
            if (isJavaDoc()){
                artifact(androidJavadocsJar)
            }

            pom {
                name = POM_NAME
                description = POM_DESCRIPTION
                url = POM_URL
                licenses {
                    license {
                        name = POM_LICENCE_NAME
                        url = POM_LICENCE_URL
                    }
                }
                developers {
                    developer {
                        name = POM_DEVELOPER_NAME
                        email = POM_DEVELOPER_EMAIL
                    }
                }
                scm {
                    connection = POM_SCM_CONNECTION
                    developerConnection = POM_SCM_DEV_CONNECTION
                    url = POM_SCM_URL
                }
            }
        }
    }
}

//snapshots skip signing
tasks.withType(Sign) {
    onlyIf { isReleaseVersion() }
}

signing {
    sign publishing.publications.uploadArchives
}